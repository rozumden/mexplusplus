#define __MEXPLUSPLUS_EIGEN_HPP__

#include <vector>

#include <eigen3/Eigen/Dense>
#include <eigen3/Eigen/Sparse>

#include "mexplus/arguments.h"
#include "mexplus/dispatch.h"

#include "mexplusplus/eigen/vector.hpp"
#include "mexplusplus/eigen/sparse_matlab_eigen.hpp"

namespace mexplus  {

  template <>
  mxArray* 
  MxArray::from(const std::vector<Eigen::Vector3f>& u)
  {
    return eigen_to_matlab(u);
  }

  template <>
  mxArray* 
  MxArray::from(const std::vector<Eigen::Vector3d>& u)
  {
    return eigen_to_matlab(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, std::vector<Eigen::Vector3f>* u) 
  {
    *u = matlab_to_eigen<typename Eigen::Vector3f::Scalar,3>(array);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, std::vector<Eigen::Vector3d>* u) 
  {
    *u = matlab_to_eigen<typename Eigen::Vector3d::Scalar,3>(array);
  }

  // Define template specializations for doubles.
  template <>
  mxArray* 
  MxArray::from(const Eigen::SparseMatrix<double, Eigen::ColMajor>& u) 
  {
    return ::eigen_to_matlab<double, Eigen::ColMajor>(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, Eigen::SparseMatrix<double, Eigen::ColMajor>* u) 
  {
    matlab_to_eigen<double, Eigen::ColMajor>(array,u);
  }

  template <>
  mxArray* 
  MxArray::from(const Eigen::SparseMatrix<double, Eigen::RowMajor>& u) 
  {
    return eigen_to_matlab<double,Eigen::RowMajor>(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, Eigen::SparseMatrix<double, Eigen::RowMajor>* u) 
  {
    matlab_to_eigen<double,Eigen::RowMajor>(array,u);
  }

  // Define template specializations for ints.
  template <>
  mxArray* 
  MxArray::from(const Eigen::SparseMatrix<int, Eigen::ColMajor>& u) 
  {
    return eigen_to_matlab<int, Eigen::ColMajor>(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, Eigen::SparseMatrix<int, Eigen::ColMajor>* u) 
  {
    matlab_to_eigen<int, Eigen::ColMajor>(array,u);
  }

  template <>
  mxArray* 
  MxArray::from(const Eigen::SparseMatrix<int, Eigen::RowMajor>& u) 
  {
    return eigen_to_matlab<int,Eigen::RowMajor>(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, Eigen::SparseMatrix<int, Eigen::RowMajor>* u) 
  {
    matlab_to_eigen<int,Eigen::RowMajor>(array,u);
  }

  // Define template specializations for long long.
  template <>
  mxArray* 
  MxArray::from(const Eigen::SparseMatrix<long long, Eigen::ColMajor>& u) 
  {
    return eigen_to_matlab<long long, Eigen::ColMajor>(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, Eigen::SparseMatrix<long long, Eigen::ColMajor>* u) 
  {
    matlab_to_eigen<long long, Eigen::ColMajor>(array,u);
  }

  template <>
  mxArray* 
  MxArray::from(const Eigen::SparseMatrix<long long, Eigen::RowMajor>& u) 
  {
    return eigen_to_matlab<long long,Eigen::RowMajor>(u);
  }

  template <>
  void 
  MxArray::to(const mxArray* array, Eigen::SparseMatrix<long long, Eigen::RowMajor>* u) 
  {
    matlab_to_eigen<long long,Eigen::RowMajor>(array,u);
  }

} // namespace mexplus

#endif
